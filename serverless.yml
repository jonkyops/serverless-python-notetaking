# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: serverless-python-notetaking

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python2.7
  # 'iamRoleStatement' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  inidividually: true
#  include:
#    - include-me.py
#    - include-me-dir/**
  exclude:
    - api/hello
    - api/create_note
    - api/read_note
    - api/read_all
    - api/update_note

functions:
  hello:
    handler: api/hello/handler.handler
  createNote:
    handler: api/create_note/handler.handler
    events:
      - http:
          path: notes/create
          method: POST
          cors: true
          authorizer:
            arn: arn:aws:cognito-idp:us-east-1:339541073473:userpool/us-east-1_7KAbwNatF
  readNote:
    handler: api/read_note/handler.handler
    events:
      - http:
          path: notes/{id}
          method: GET
          cors: true
          authorizer:
            arn: arn:aws:cognito-idp:us-east-1:339541073473:userpool/us-east-1_7KAbwNatF
  readAll:
    handler: api/read_all/handler.handler
    events:
      - http:
          path: notes
          method: GET
          cors: true
          authorizer:
            arn: arn:aws:cognito-idp:us-east-1:339541073473:userpool/us-east-1_7KAbwNatF
  updateNote:
    handler: api/update_note/handler.handler
    events:
      - http:
          path: notes/{id}
          method: PUT
          cors: true
          authorizer:
            arn: arn:aws:cognito-idp:us-east-1:339541073473:userpool/us-east-1_7KAbwNatF
  deleteNote:
    handler: api/delete_note/handler.handler
    events:
      - http:
          path: notes/{id}
          method: DELETE
          cors: true
          authorizer:
            arn: arn:aws:cognito-idp:us-east-1:339541073473:userpool/us-east-1_7KAbwNatF
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    DynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: notes
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: noteId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: noteId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    DynamoDBIamPolicy:
      Type: AWS::IAM::Policy
      DependsOn: DynamoDbTable
      Properties:
        PolicyName: lambda-dynamodb
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:Query
                - dynamodb:UpdateItem
              Resource: arn:aws:dynamodb:*:*:table/notes
        Roles:
          - Ref: IamRoleLambdaExecution
    NotesAttachmentBucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicReadWrite
        BucketName: jonkyops-notes-attachments
        CorsConfiguration:
          CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, HEAD]
            AllowedOrigins: ['*']
            MaxAge: '3000'
#  NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
